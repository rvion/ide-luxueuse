<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite9</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_keyboard_string  = false
my_anykey           = false
my_backspace        = false
my_left             = false
my_right            = false
my_control          = false
my_enter            = false

old_keyboard_string = ""
old_right           = false
old_left            = false
old_delete          = false
old_backspace       = false
old_enter           = false

larg= 0;
haut= 0;

parent       = noone

content      = "";
content_temp = "";
type         = TYPE_INPUT;
layout       = LAYOUT_SIMPLE;
refresh_rate = 0;
my_blocs     = ds_list_create()

// editing content
c_1          = 0;
c_2          = 0;
c_dir        = 0;
selected     = true;
maxchar      = 200;
password     = false;
bord_h = 8;
bord_w = 8;
wait_char = 0;
wait_time = 0;

draw_set_font(font0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _len;


// FIXME: add a proper f_remove_bloc
//
//if (not selected and content_temp =='')
//{
//    instance_destroy();
//}

if (selected)
{
    if  ( o_input.my_anykey
    and ! o_input.my_backspace
    and ! o_input.my_left
    and ! o_input.my_right
    and ! o_input.my_control
    and ! o_input.my_enter)
    {
        if not (o_input.my_keyboard_string == "")
        {
            if (c_1 != c_2)
            { 
                content_temp = string_delete(content_temp, c_1+1, c_2-c_1);
                c_2 = c_1;
            }
            _len = string_length(content_temp);
            if      (c_1 == c_2 and c_1 == _len)   { content_temp = content_temp + o_input.my_keyboard_string; }
            else if (c_1 == c_2 and c_1 == 0)      { content_temp = o_input.my_keyboard_string + content_temp ; }
            else                                   { content_temp = string_insert(o_input.my_keyboard_string, content_temp, c_1+1);}
            
            c_1 += string_length(o_input.my_keyboard_string);
            c_2  = c_1;
            
            old_keyboard_string = o_input.my_keyboard_string;
            o_input.my_keyboard_string = '';
            keyboard_string = '';
        }
    }
    
    
    
    //-------------------------------
    // NEWLINE       *press enter*  |
    //-------------------------------
    if keyboard_check_pressed(vk_enter)
    {
        /*
        new_son1              = instance_create(x,y,o_bloc);
        new_son2              = instance_create(x,y,o_bloc);
        new_son1.parent       = id
        new_son2.parent       = id
        new_son1.content_temp = content_temp;
        new_son2.content_temp = "test";
        type                  = TYPE_LAYOUT;
        layout                = LAYOUT_VER;
        ds_list_add(my_blocs,new_son1);
        ds_list_add(my_blocs,new_son1);
        */
    }
 
    //-------------------------------
    // BACKSPACE       x-  droite   |
    //-------------------------------

    if keyboard_check(vk_backspace)
    {
        if (old_backspace&gt;1)
        {
            old_backspace-=1;
        }
        else
        {
            if (c_1 == c_2) 
            { 
                if (c_1 &gt; 0)
                {
                    if keyboard_check(vk_control) 
                    {
                        if string_pos(string_char_at(content_temp, (c_1))," _")
                        {
                            while ( string_pos(string_char_at(content_temp, (c_1)), " _"))
                            {
                                if (c_1 &gt; 0) { content_temp = string_delete(content_temp, c_1  , 1); c_1 -=1; c_2 = c_1;}
                                else         { c_1 = 0;break}
                            }
                        }
                        else
                        {
                            while ( not string_pos(string_char_at(content_temp, (c_1)), " _"))
                            {
                                if (c_1 &gt; 0) { content_temp = string_delete(content_temp, c_1  , 1); c_1 -=1; c_2 = c_1;}
                                else         { c_1 = 0; break;}
                            }
                        }
                    }
                    else
                    {
                        content_temp = string_delete(content_temp, c_1  , 1);
                        c_1 -= 1;
                        c_2 = c_1;
                    }
                }
            }
            else            
            { 
                content_temp = string_delete(content_temp, c_1+1, c_2-c_1);
                c_2 = c_1; 
            }
            if (old_backspace == false){ old_backspace = 8; }
            keyboard_string = ''
        }
    }
    else {old_backspace = false;}

    //-------------------------------
    // DELETE          -x  gauche   |
    //-------------------------------
    if keyboard_check(vk_delete)
    {
        if (old_delete&gt;1)
        {
            old_delete-=1;
        }
        else
        {
            if (c_1 == c_2) 
            { 
                if (c_1 &lt; string_length(content_temp))
                {
                    content_temp = string_delete(content_temp, c_1+1  , 1);
                }
            }
            else            
            { 
                content_temp = string_delete(content_temp, c_1+1, c_2-c_1);
                c_2 = c_1; 
            }
            if (old_delete == false){ old_delete = 8; }
            keyboard_string = ''
        }
    }
    else {old_delete = false;}
    
    //-------------------------------
    // DEPLACEMENT     &lt;-  gauche   |
    //-------------------------------
    if (keyboard_check(vk_left))
    {
        if (old_left&gt;1)
        {
            old_left-=1;
        }
        else
        {
            if keyboard_check(vk_control) 
            {
                if (c_1 &gt; 0)
                {
                    if string_pos(string_char_at(content_temp, (c_1))," _")
                    {
                        while ( string_pos(string_char_at(content_temp, (c_1)), " _"))
                        {
                            if (c_1 &gt; 0) { c_1 -=1;}
                            else         { c_1 = 0; break;}
                        }
                    }
                    else
                    {
                        while ( not string_pos(string_char_at(content_temp, (c_1)), " _"))
                        {
                            if (c_1 &gt; 0) { c_1 -=1;}
                            else         { c_1 = 0; break;}
                        }
                    }
                }
                else
                {
                    c_1 = 0;
                }
            }
            else 
            { 
                c_1 -= 1;
                if (c_1 &lt; 0) { c_1 = 0; }
            }
            
            if not keyboard_check(vk_shift) { c_2 = c_1; }
            if (old_left == false)          { old_left = 8; }
        }
    }
    else {old_left = false;}

    //-------------------------------
    // DEPLACEMENT     -&gt;  droite   |
    //-------------------------------
    if keyboard_check(vk_right) 
    {
        if (old_right&gt;1)
        {
            old_right-=1;
        }
        else
        {
            if keyboard_check(vk_control) 
            {
                if (c_2+1)&lt; string_length(content_temp)
                {
                    if string_pos(string_char_at(content_temp, (c_2+1))," _")
                    {
                        while ( string_pos(string_char_at(content_temp, (c_2+1)), " _"))
                        {
                            if (c_2 &lt; string_length(content_temp)) { c_2 +=1;}
                            else                                   { c_2 = string_length(content_temp); break;}
                        }
                    }
                    else
                    {
                        while ( not string_pos(string_char_at(content_temp, (c_2+1)), " _"))
                        {
                            if (c_2 &lt; string_length(content_temp)) { c_2 +=1;}
                            else                                   { c_2 = string_length(content_temp); break;}
                        }
                    }
                }
                else
                {
                    c_2 = string_length(content_temp);
                }
            }
            else 
            { 
                c_2 += 1;
                if c_2 &gt; string_length(content_temp) { c_2 = string_length(content_temp); }
            }
        }
        
        if not keyboard_check(vk_shift) { c_1 = c_2 }
        if (old_right == false)         { old_right = 8; }
    }
    else {old_right = false;}
    
    //-------------------------------
    // COPY              Ctrl + C   |
    //-------------------------------
    if  keyboard_check(vk_control) 
    and keyboard_check_pressed(ord('C')) 
    and (c_1 != c_2)
    {   
        clipboard_set_text(string_copy(content_temp, c_1, c_2-c_1));
    }
    
    //-------------------------------
    // PASTE              Ctrl + V  |
    //-------------------------------
    if  keyboard_check(vk_control) 
    and keyboard_check_pressed(ord('V')) 
    {
        if clipboard_has_text()
        {
            if (c_1 == c_2) {content_temp = string_insert(clipboard_get_text(), content_temp, c_1)}
            else            
            { 
                content_temp = string_delete(content_temp, c_1+1, c_2-c_1);
                c_2 = c_1;
                content_temp = string_insert(clipboard_get_text(), content_temp, c_1);
            }
        }
    }
    //-------------------------------
    // SELECT ALL        Ctrl + A   |
    //-------------------------------
    if  keyboard_check(vk_control) 
    and keyboard_check_pressed(ord('A')) 
    {   
        c_1=0;
        c_2=string_length(content_temp);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
